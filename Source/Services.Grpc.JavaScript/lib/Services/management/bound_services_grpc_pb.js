// GENERATED CODE -- DO NOT EDIT!
// Original file comments:
// ---------------------------------------------------------------------------------------------
//  Copyright (c) Dolittle. All rights reserved.
//  Licensed under the MIT License. See LICENSE in the project root for license information.
// --------------------------------------------------------------------------------------------
'use strict';
var grpc = require('grpc');
var Services_management_bound_services_pb = require('../../Services/management/bound_services_pb.js');
function serialize_dolittle_services_management_ServiceType(arg) {
    if (!(arg instanceof Services_management_bound_services_pb.ServiceType)) {
        throw new Error('Expected argument of type dolittle.services.management.ServiceType');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dolittle_services_management_ServiceType(buffer_arg) {
    return Services_management_bound_services_pb.ServiceType.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dolittle_services_management_Services(arg) {
    if (!(arg instanceof Services_management_bound_services_pb.Services)) {
        throw new Error('Expected argument of type dolittle.services.management.Services');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dolittle_services_management_Services(buffer_arg) {
    return Services_management_bound_services_pb.Services.deserializeBinary(new Uint8Array(buffer_arg));
}
// Represents all the bound gRPC services in the system
var BoundServicesService = exports.BoundServicesService = {
    getForServiceType: {
        path: '/dolittle.services.management.BoundServices/GetForServiceType',
        requestStream: false,
        responseStream: false,
        requestType: Services_management_bound_services_pb.ServiceType,
        responseType: Services_management_bound_services_pb.Services,
        requestSerialize: serialize_dolittle_services_management_ServiceType,
        requestDeserialize: deserialize_dolittle_services_management_ServiceType,
        responseSerialize: serialize_dolittle_services_management_Services,
        responseDeserialize: deserialize_dolittle_services_management_Services,
    },
};
exports.BoundServicesClient = grpc.makeGenericClientConstructor(BoundServicesService);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRfc2VydmljZXNfZ3JwY19wYi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsiU2VydmljZXMvbWFuYWdlbWVudC9ib3VuZF9zZXJ2aWNlc19ncnBjX3BiLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlDQUFpQztBQUVqQywwQkFBMEI7QUFDMUIsZ0dBQWdHO0FBQ2hHLGdEQUFnRDtBQUNoRCw0RkFBNEY7QUFDNUYsK0ZBQStGO0FBQy9GLFlBQVksQ0FBQztBQUNiLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLHFDQUFxQyxHQUFHLE9BQU8sQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0FBRXRHLFNBQVMsa0RBQWtELENBQUMsR0FBRztJQUM3RCxJQUFJLENBQUMsQ0FBQyxHQUFHLFlBQVkscUNBQXFDLENBQUMsV0FBVyxDQUFDLEVBQUU7UUFDdkUsTUFBTSxJQUFJLEtBQUssQ0FBQyxvRUFBb0UsQ0FBQyxDQUFDO0tBQ3ZGO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFFRCxTQUFTLG9EQUFvRCxDQUFDLFVBQVU7SUFDdEUsT0FBTyxxQ0FBcUMsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUN6RyxDQUFDO0FBRUQsU0FBUywrQ0FBK0MsQ0FBQyxHQUFHO0lBQzFELElBQUksQ0FBQyxDQUFDLEdBQUcsWUFBWSxxQ0FBcUMsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNwRSxNQUFNLElBQUksS0FBSyxDQUFDLGlFQUFpRSxDQUFDLENBQUM7S0FDcEY7SUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVELFNBQVMsaURBQWlELENBQUMsVUFBVTtJQUNuRSxPQUFPLHFDQUFxQyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ3RHLENBQUM7QUFHRCx1REFBdUQ7QUFDdkQsSUFBSSxvQkFBb0IsR0FBRyxPQUFPLENBQUMsb0JBQW9CLEdBQUc7SUFDeEQsaUJBQWlCLEVBQUU7UUFDakIsSUFBSSxFQUFFLCtEQUErRDtRQUNyRSxhQUFhLEVBQUUsS0FBSztRQUNwQixjQUFjLEVBQUUsS0FBSztRQUNyQixXQUFXLEVBQUUscUNBQXFDLENBQUMsV0FBVztRQUM5RCxZQUFZLEVBQUUscUNBQXFDLENBQUMsUUFBUTtRQUM1RCxnQkFBZ0IsRUFBRSxrREFBa0Q7UUFDcEUsa0JBQWtCLEVBQUUsb0RBQW9EO1FBQ3hFLGlCQUFpQixFQUFFLCtDQUErQztRQUNsRSxtQkFBbUIsRUFBRSxpREFBaUQ7S0FDdkU7Q0FDRixDQUFDO0FBRUYsT0FBTyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gR0VORVJBVEVEIENPREUgLS0gRE8gTk9UIEVESVQhXG5cbi8vIE9yaWdpbmFsIGZpbGUgY29tbWVudHM6XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vICBDb3B5cmlnaHQgKGMpIERvbGl0dGxlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4ndXNlIHN0cmljdCc7XG52YXIgZ3JwYyA9IHJlcXVpcmUoJ2dycGMnKTtcbnZhciBTZXJ2aWNlc19tYW5hZ2VtZW50X2JvdW5kX3NlcnZpY2VzX3BiID0gcmVxdWlyZSgnLi4vLi4vU2VydmljZXMvbWFuYWdlbWVudC9ib3VuZF9zZXJ2aWNlc19wYi5qcycpO1xuXG5mdW5jdGlvbiBzZXJpYWxpemVfZG9saXR0bGVfc2VydmljZXNfbWFuYWdlbWVudF9TZXJ2aWNlVHlwZShhcmcpIHtcbiAgaWYgKCEoYXJnIGluc3RhbmNlb2YgU2VydmljZXNfbWFuYWdlbWVudF9ib3VuZF9zZXJ2aWNlc19wYi5TZXJ2aWNlVHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGFyZ3VtZW50IG9mIHR5cGUgZG9saXR0bGUuc2VydmljZXMubWFuYWdlbWVudC5TZXJ2aWNlVHlwZScpO1xuICB9XG4gIHJldHVybiBCdWZmZXIuZnJvbShhcmcuc2VyaWFsaXplQmluYXJ5KCkpO1xufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZV9kb2xpdHRsZV9zZXJ2aWNlc19tYW5hZ2VtZW50X1NlcnZpY2VUeXBlKGJ1ZmZlcl9hcmcpIHtcbiAgcmV0dXJuIFNlcnZpY2VzX21hbmFnZW1lbnRfYm91bmRfc2VydmljZXNfcGIuU2VydmljZVR5cGUuZGVzZXJpYWxpemVCaW5hcnkobmV3IFVpbnQ4QXJyYXkoYnVmZmVyX2FyZykpO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVfZG9saXR0bGVfc2VydmljZXNfbWFuYWdlbWVudF9TZXJ2aWNlcyhhcmcpIHtcbiAgaWYgKCEoYXJnIGluc3RhbmNlb2YgU2VydmljZXNfbWFuYWdlbWVudF9ib3VuZF9zZXJ2aWNlc19wYi5TZXJ2aWNlcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGFyZ3VtZW50IG9mIHR5cGUgZG9saXR0bGUuc2VydmljZXMubWFuYWdlbWVudC5TZXJ2aWNlcycpO1xuICB9XG4gIHJldHVybiBCdWZmZXIuZnJvbShhcmcuc2VyaWFsaXplQmluYXJ5KCkpO1xufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZV9kb2xpdHRsZV9zZXJ2aWNlc19tYW5hZ2VtZW50X1NlcnZpY2VzKGJ1ZmZlcl9hcmcpIHtcbiAgcmV0dXJuIFNlcnZpY2VzX21hbmFnZW1lbnRfYm91bmRfc2VydmljZXNfcGIuU2VydmljZXMuZGVzZXJpYWxpemVCaW5hcnkobmV3IFVpbnQ4QXJyYXkoYnVmZmVyX2FyZykpO1xufVxuXG5cbi8vIFJlcHJlc2VudHMgYWxsIHRoZSBib3VuZCBnUlBDIHNlcnZpY2VzIGluIHRoZSBzeXN0ZW1cbnZhciBCb3VuZFNlcnZpY2VzU2VydmljZSA9IGV4cG9ydHMuQm91bmRTZXJ2aWNlc1NlcnZpY2UgPSB7XG4gIGdldEZvclNlcnZpY2VUeXBlOiB7XG4gICAgcGF0aDogJy9kb2xpdHRsZS5zZXJ2aWNlcy5tYW5hZ2VtZW50LkJvdW5kU2VydmljZXMvR2V0Rm9yU2VydmljZVR5cGUnLFxuICAgIHJlcXVlc3RTdHJlYW06IGZhbHNlLFxuICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICByZXF1ZXN0VHlwZTogU2VydmljZXNfbWFuYWdlbWVudF9ib3VuZF9zZXJ2aWNlc19wYi5TZXJ2aWNlVHlwZSxcbiAgICByZXNwb25zZVR5cGU6IFNlcnZpY2VzX21hbmFnZW1lbnRfYm91bmRfc2VydmljZXNfcGIuU2VydmljZXMsXG4gICAgcmVxdWVzdFNlcmlhbGl6ZTogc2VyaWFsaXplX2RvbGl0dGxlX3NlcnZpY2VzX21hbmFnZW1lbnRfU2VydmljZVR5cGUsXG4gICAgcmVxdWVzdERlc2VyaWFsaXplOiBkZXNlcmlhbGl6ZV9kb2xpdHRsZV9zZXJ2aWNlc19tYW5hZ2VtZW50X1NlcnZpY2VUeXBlLFxuICAgIHJlc3BvbnNlU2VyaWFsaXplOiBzZXJpYWxpemVfZG9saXR0bGVfc2VydmljZXNfbWFuYWdlbWVudF9TZXJ2aWNlcyxcbiAgICByZXNwb25zZURlc2VyaWFsaXplOiBkZXNlcmlhbGl6ZV9kb2xpdHRsZV9zZXJ2aWNlc19tYW5hZ2VtZW50X1NlcnZpY2VzLFxuICB9LFxufTtcblxuZXhwb3J0cy5Cb3VuZFNlcnZpY2VzQ2xpZW50ID0gZ3JwYy5tYWtlR2VuZXJpY0NsaWVudENvbnN0cnVjdG9yKEJvdW5kU2VydmljZXNTZXJ2aWNlKTtcbiJdfQ==